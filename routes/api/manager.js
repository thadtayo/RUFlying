const express = require('express');
const router = express.Router();
const con = require('../../db');

// edit the customer's information
router.post('/edit_customer', (req, res) => {
    if(req.session.isCustomer == false) {

    const account_num = req.session.account_num;
    const email = req.body.email;
    const first = req.body.first;
    const last = req.body.last;
    const address = req.body.address;
    const zip = req.body.zip;
    const phone = req.body.phone;
    const pref = req.body.preferences;
    const state = req.body.state;

    con.query(`UPDATE Customers SET email=${email}, first=${first}, last=${last}, address=${address}, zip=${zip}, phone=${phone}, pref=${pref}, state=${state} WHERE account_num=${account_num};`, function(err, results, fields) {
        if (err) throw err;
        console.log('Updated Customer info.');
    });

    } else {
        res.send('You\'re not allowed to do that!');
    }
});

// get all reservations
router.get('/all_reservations', (req, res) => {
    con.query("SELECT * FROM Reservations", function(err, results, fields){
        if(err) throw err;
        res.json(results);
    });
});

// get all flights
router.get('/all_flights', (req, res) => {
    con.query("SELECT * FROM Flights", function(err, results, fields){
        if(err) throw err;
        res.json(results);
    });
});

// get all reservations by flight number
router.get('/res_by_flight', (req, res) => {

    const flight_num = req.body.flight_num;

    con.query(`SELECT ContainsLeg.flight_num, Reservations.* FROM ContainsLeg INNER JOIN Reservations USING (reservation_num) WHERE flight_num=${flight_num};`, function(err, results, fields){
        if(err) throw err;
        res.json(results);
    });
});

// get all reservations by customer name
router.get('/res_by_name', (req, res) => {

    const first = req.body.first;
    const last = req.body.last;

    con.query(`SELECT Customers.first_name, Customers.last_name, Reservations.* FROM Customers, Reservations WHERE first_name=${first} AND last_name=${last};`, function(err, results, fields) {
        if (err) throw err;
        res.json(results);
    });

});

// obtain sales report for a particular month

// Produce a summary listing of revenue generated by a particular flight
router.get('/flight_summary', (req, res) => {

    const flight_num = req.body.flight_num;

    con.query(`SELECT ContainsLeg.flight_num, Reservations.total_fare, SUM(Reservations.total_fare) FROM ContainsLeg INNER JOIN Reservations USING(reservation_num) WHERE flight_num=${flight_num};`, function(err, results, fields) {
        if (err) throw err;
        res.json(results);
    });

});

// Produce a summary listing of revenue generated by a destination city
router.get('/city_summary', (req, res) => {

    const flight_num = req.body.flight_num;
    var flights = {};

    con.query(`SELECT Flights.flight_num FROM Flights`, function(err, results, fields) {
        if (err) throw err;
        Object.keys(results).forEach(function(key) {

        })
    });

});

// Produce a summary listing of revenue generated by a customer

// Determine which customer generated most total revenue

// Produce a list of most active flights

// Produce a list of all customers who have seats reserved on a given flight
router.get('/customer_seats', (req, res) => {
    const flight_num = req.body.flight_num;

    con.query(`SELECT ContainsLeg.flight_num, ContainsLeg.seat_num, Customers.* FROM (ContainsLeg INNER JOIN HasReservations USING (reservation_num)) INNER JOIN Customers USING (account_num) WHERE flight_num=${flight_num};`, function(err, results, fields) {
        if (err) throw err;
        res.json(results);
    });
});

// Produce a list of all flights for a given airport
router.get('/airport_flights', (req, res) => {
    const airport_id = req.body.airport_id;

    con.query(`SELECT Airports.name AS airport_name, Flights.* FROM (Flights INNER JOIN FlightHasStops USING (flight_num)) INNER JOIN Airports USING (airport_id) WHERE airport_id=${airport_id};`, function (err, results, fields) {

    });
});

// Produce a list of all flights whose arrival and departure times are on-time

// Produce a list of all flights whose arrival and departure times are delayed