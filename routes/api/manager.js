const express = require('express');
const router = express.Router();
const con = require('../../db');

router.get('/', (req, res) => {
    if(req.session.isCustomer == False) {
        res.send('You have successfully logged in!')
    } else {
        res.send('You are not authorized to be here!');
    }
})

// edit the customer's information
router.post('/edit_customer', (req, res) => {
    if(req.session.isCustomer == false) {

    const account_num = req.session.account_num;
    const email = req.body.email;
    const first = req.body.first;
    const last = req.body.last;
    const address = req.body.address;
    const zip = req.body.zip;
    const phone = req.body.phone;
    const pref = req.body.preferences;
    const state = req.body.state;

    con.query(`UPDATE Customers SET email=${email}, first=${first}, last=${last}, address=${address}, zip=${zip}, phone=${phone}, pref=${pref}, state=${state} WHERE account_num=${account_num};`, function(err, results, fields) {
        if (err) throw err;
        console.log('Updated Customer info.');
    });

    } else {
        res.send('You\'re not allowed to do that!');
    }
});

// get all reservations
router.get('/all_reservations', (req, res) => {
    con.query("SELECT * FROM Reservations", function(err, results, fields){
        if(err) throw err;
        res.json(results);
    });
});

// get all flights
router.get('/all_flights', (req, res) => {
    con.query("SELECT * FROM Flights", function(err, results, fields){
        if(err) throw err;
        res.json(results);
    });
});

// get all reservations by flight number
router.get('/res_by_flight', (req, res) => {

    const flight_num = req.body.flight_num;

    con.query(`SELECT ContainsLeg.flight_num, Reservations.* FROM ContainsLeg INNER JOIN Reservations USING (reservation_num) WHERE flight_num=${flight_num};`, function(err, results, fields){
        if(err) throw err;
        res.json(results);
    });
});

// get all reservations by customer name
router.get('/res_by_name', (req, res) => {

    const first = req.body.first;
    const last = req.body.last;

    con.query(`SELECT Customers.first_name, Customers.last_name, Reservations.* FROM Customers, Reservations WHERE first_name=${first} AND last_name=${last};`, function(err, results, fields) {
        if (err) throw err;
        res.json(results);
    });

});

// obtain sales report for a particular month
router.get('/sales_report', (req, res) => {
    
    const month_name = req.body.month_name;

    var month;

    switch(month_name) {
        case 'January' : month = '01';
                        break;
        case 'February' : month = '02';
                        break;
        case 'March' : month = '03';
                        break;
        case 'April' : month = '04';
                        break;
        case 'May' : month = '05';
                        break;
        case 'June' : month = '06';
                        break;
        case 'July' : month = '07';
                        break;
        case 'August' : month = '08';
                        break;
        case 'September' : month = '09';
                        break;
        case 'October' : month = '10';
                        break;
        case 'November' : month = '11';
                        break;
        case 'December' : month = '12';
                        break;
    }

    con.query(`SELECT Reservations.date AS ${month}, SUM(Reservations.total_fare) AS total_revenue FROM Reservations WHERE Reservations.date='____\-${month}\-__';`, function (err, results, fields) {
        if (err) throw err;
        res.json(results);    
    })
})

// Produce a summary listing of revenue generated by a particular flight
router.get('/flight_summary', (req, res) => {

    const flight_num = req.body.flight_num;

    con.query(`SELECT ContainsLeg.flight_num, Reservations.total_fare, SUM(Reservations.total_fare) FROM ContainsLeg INNER JOIN Reservations USING(reservation_num) WHERE flight_num=${flight_num};`, function(err, results, fields) {
        if (err) throw err;
        res.json(results);
    });

});

// Produce a summary listing of revenue generated by a destination city
router.get('/city_summary', (req, res) => {

    const city = req.body.city;
    

    con.query(`SELECT Airports.name AS city_name, SUM(Reservations.total_fare) AS total_revenue FROM (Airports INNER JOIN FlightHasStops USING (airport_id)) INNER JOIN (ContainsLeg INNER JOIN Reservations USING (reservation_num)) USING (flight_num) WHERE city=${city};`, function(err, results, fields) {
        if (err) throw err;
        res.json(results);
    });

});

// Produce a summary listing of revenue generated by a customer
router.get('/customer_summary', (req, res) => {
    const account_num = req.session.account_num;

    con.query(`SELECT Customers.account_num, Customers.first_name, Customers.last_name, Customers.email, SUM(Reservations.total_fare) AS total_revenue FROM Customers INNER JOIN (HasReservations INNER JOIN Reservations USING (reservation_num)) USING (account_num) WHERE account_num=${account_num};`, function (err, results, fields) {
        if (err) throw err;
        res.json(results);
    });
});

// Determine which customer generated most total revenue
router.get('/customer_max_rev', (req, res) => {

    con.query(`SELECT * FROM (SELECT Customers.account_num, Customers.first_name, Customers.last_name, Customers.email, SUM(Reservations.total_fare) AS total_revenue FROM Customers INNER JOIN (HasReservations INNER JOIN Reservations USING (reservation_num)) USING (account_num)) AS tbl HAVING total_revenue = MAX(total_revenue);`, function (err, results, fields) {
        if (err) throw err;
        res.json(results);
    });
});

// Produce a list of most active flights
// My interpretation is that the flights with the most reservations are the most active flights
router.get('/active_flights', (req, res) => {
    const flight_num = req.body.flight_num;

    con.query(`SELECT ContainsLeg.flight_num, Airlines.name AS airline, COUNT(ContainsLeg.reservation_num) AS num_reservations FROM ContainsLeg, Airlines WHERE ContainsLeg.airline_id=Airlines.airline_id GROUP BY flight_num LIMIT 20;`, function(err, results, fields) {
        if (err) throw err;
        res.json(results);
    });
});

// Produce a list of all customers who have seats reserved on a given flight
router.get('/customer_seats', (req, res) => {
    const flight_num = req.body.flight_num;

    con.query(`SELECT ContainsLeg.flight_num, ContainsLeg.seat_num, Customers.* FROM (ContainsLeg INNER JOIN HasReservations USING (reservation_num)) INNER JOIN Customers USING (account_num) WHERE flight_num=${flight_num};`, function(err, results, fields) {
        if (err) throw err;
        res.json(results);
    });
});

// Produce a list of all flights for a given airport
router.get('/airport_flights', (req, res) => {
    const airport_id = req.body.airport_id;

    con.query(`SELECT Airports.name AS airport_name, Flights.* FROM (Flights INNER JOIN FlightHasStops USING (flight_num)) INNER JOIN Airports USING (airport_id) WHERE airport_id=${airport_id};`, function (err, results, fields) {

    });
});

// Produce a list of all flights whose arrival and departure times are on-time

// Produce a list of all flights whose arrival and departure times are delayed

module.exports = router;